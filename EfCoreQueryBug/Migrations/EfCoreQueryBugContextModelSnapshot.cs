// <auto-generated />
using System;
using EfCoreQueryBug.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace EfCoreQueryBug.Migrations
{
    [DbContext(typeof(EfCoreQueryBugContext))]
    partial class EfCoreQueryBugContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("EfCoreQueryBug.Entities.Quest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("Difficulty");

                    b.Property<decimal>("Duration");

                    b.Property<bool>("IsPublished");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<decimal>("StartTime");

                    b.HasKey("Id");

                    b.ToTable("Quests");
                });

            modelBuilder.Entity("EfCoreQueryBug.Entities.QuestTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Duration");

                    b.Property<int>("QuestId");

                    b.Property<decimal>("Reward");

                    b.Property<decimal>("StartTime");

                    b.Property<string>("Type")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("QuestId");

                    b.ToTable("QuestTasks");

                    b.HasDiscriminator<string>("Type").HasValue("QuestTask");
                });

            modelBuilder.Entity("EfCoreQueryBug.Entities.TaskChoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("CenterX");

                    b.Property<decimal?>("CenterY");

                    b.Property<string>("ImageFilename");

                    b.Property<string>("ImageMime");

                    b.Property<int?>("Index");

                    b.Property<bool>("IsCorrect");

                    b.Property<int>("QuestTaskId");

                    b.Property<decimal?>("Radius");

                    b.Property<string>("Text");

                    b.HasKey("Id");

                    b.HasIndex("QuestTaskId");

                    b.ToTable("QuestTaskChoices");
                });

            modelBuilder.Entity("EfCoreQueryBug.Entities.TimelinePoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Position");

                    b.Property<int>("QuestTaskId");

                    b.HasKey("Id");

                    b.HasIndex("QuestTaskId");

                    b.ToTable("QuestTimelinePoints");
                });

            modelBuilder.Entity("EfCoreQueryBug.Entities.HearTask", b =>
                {
                    b.HasBaseType("EfCoreQueryBug.Entities.QuestTask");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnName("Subject")
                        .HasMaxLength(256);

                    b.ToTable("HearTask");

                    b.HasDiscriminator().HasValue("hear");
                });

            modelBuilder.Entity("EfCoreQueryBug.Entities.HiddenAreaTask", b =>
                {
                    b.HasBaseType("EfCoreQueryBug.Entities.QuestTask");

                    b.Property<decimal>("CenterX");

                    b.Property<decimal>("CenterY");

                    b.Property<decimal>("Radius");

                    b.ToTable("HiddenAreaTask");

                    b.HasDiscriminator().HasValue("hidden-area");
                });

            modelBuilder.Entity("EfCoreQueryBug.Entities.NoteTask", b =>
                {
                    b.HasBaseType("EfCoreQueryBug.Entities.QuestTask");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnName("Subject")
                        .HasMaxLength(256);

                    b.ToTable("NoteTask");

                    b.HasDiscriminator().HasValue("note");
                });

            modelBuilder.Entity("EfCoreQueryBug.Entities.QuizTask", b =>
                {
                    b.HasBaseType("EfCoreQueryBug.Entities.QuestTask");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnName("Subject")
                        .HasMaxLength(256);

                    b.ToTable("QuizTask");

                    b.HasDiscriminator().HasValue("quiz");
                });

            modelBuilder.Entity("EfCoreQueryBug.Entities.WhatsNextTask", b =>
                {
                    b.HasBaseType("EfCoreQueryBug.Entities.QuestTask");

                    b.Property<string>("Subject")
                        .HasColumnName("Subject")
                        .HasMaxLength(256);

                    b.ToTable("WhatsNextTask");

                    b.HasDiscriminator().HasValue("whats-next");
                });

            modelBuilder.Entity("EfCoreQueryBug.Entities.QuestTask", b =>
                {
                    b.HasOne("EfCoreQueryBug.Entities.Quest", "Quest")
                        .WithMany("Tasks")
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EfCoreQueryBug.Entities.TaskChoice", b =>
                {
                    b.HasOne("EfCoreQueryBug.Entities.HiddenAreaTask")
                        .WithMany("Choices")
                        .HasForeignKey("QuestTaskId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EfCoreQueryBug.Entities.QuizTask")
                        .WithMany("Choices")
                        .HasForeignKey("QuestTaskId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EfCoreQueryBug.Entities.WhatsNextTask")
                        .WithMany("Choices")
                        .HasForeignKey("QuestTaskId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("EfCoreQueryBug.Entities.TimelinePoint", b =>
                {
                    b.HasOne("EfCoreQueryBug.Entities.HearTask")
                        .WithMany("TimelinePoints")
                        .HasForeignKey("QuestTaskId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EfCoreQueryBug.Entities.NoteTask")
                        .WithMany("TimelinePoints")
                        .HasForeignKey("QuestTaskId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
